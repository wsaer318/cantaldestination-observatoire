#!/usr/bin/env python3
"""
Script pour t√©l√©charger automatiquement toutes les ann√©es disponibles
"""

import requests
from requests.auth import HTTPBasicAuth
import yaml
import logging
import re
from datetime import datetime
import os
import sys
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def get_available_years():
    """R√©cup√®re toutes les ann√©es disponibles dans l'API"""
    config_file = 'sample_FV_Portal_api_conf.yml'
    
    try:
        with open(config_file) as cf:
            config = yaml.load(cf, Loader=yaml.FullLoader)
        
        login = config['LOGIN']
        passwd = config['PASSWD']
        auth = HTTPBasicAuth(login, passwd)
        
        API_URL = config['API_URL']
        ORGA_CODE_REF = config['ORGA_CODE_REF']
        
        logging.info(f"Connexion √† l'API pour r√©cup√©rer les ann√©es disponibles...")
        r = requests.get(API_URL + '/' + ORGA_CODE_REF + '/', auth=auth)
        
        if r.status_code != 200:
            logging.error(f"Erreur API : Status code {r.status_code}")
            return []
        
        results = r.json()
        years = set()
        
        # Extraire les ann√©es des delivery_name
        for result in results:
            delivery_name = result.get('delivery_name', '')
            study_code = result.get('study_code_ref', '')
            file_name = result.get('file_name', '')
            
            if (study_code == 'CANT-150' and 
                file_name and file_name.lower().endswith('.zip')):
                
                # Chercher les patterns B1 2019, B2 2020, etc.
                year_match = re.search(r'B\d+\s+(\d{4})', delivery_name)
                if year_match:
                    years.add(year_match.group(1))
        
        return sorted(list(years))
    
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration des ann√©es : {e}")
        return []

def download_year(year):
    """T√©l√©charge une ann√©e sp√©cifique"""
    print(f"\nüîÑ T√©l√©chargement de l'ann√©e {year}...")
    
    # Importer la fonction depuis le script existant
    import download_FV_Portal_zip
    success = download_FV_Portal_zip.download_zip_files(year)
    
    if success:
        print(f"‚úÖ Ann√©e {year} t√©l√©charg√©e avec succ√®s")
    else:
        print(f"‚ùå √âchec du t√©l√©chargement pour l'ann√©e {year}")
    
    return success

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üöÄ T√âL√âCHARGEMENT AUTOMATIQUE - TOUTES LES ANN√âES")
    print("=" * 60)
    
    # R√©cup√©rer les ann√©es disponibles
    print("\nüîç Recherche des ann√©es disponibles...")
    available_years = get_available_years()
    
    if not available_years:
        print("‚ùå Aucune ann√©e trouv√©e ou erreur de connexion")
        return
    
    print(f"üìÖ Ann√©es disponibles : {', '.join(available_years)}")
    print(f"üìä Total : {len(available_years)} ann√©es")
    
    # Demander confirmation
    response = input(f"\n‚ùì T√©l√©charger toutes ces {len(available_years)} ann√©es ? (oui/non): ")
    if response.lower() not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå T√©l√©chargement annul√©")
        return
    
    # T√©l√©charger chaque ann√©e
    start_time = datetime.now()
    success_count = 0
    failed_years = []
    
    for i, year in enumerate(available_years, 1):
        print(f"\nüì¶ [{i}/{len(available_years)}] Traitement de l'ann√©e {year}")
        
        if download_year(year):
            success_count += 1
        else:
            failed_years.append(year)
    
    # R√©sum√© final
    end_time = datetime.now()
    duration = end_time - start_time
    
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â FINAL")
    print("=" * 60)
    print(f"‚è±Ô∏è  Dur√©e totale : {duration}")
    print(f"‚úÖ T√©l√©chargements r√©ussis : {success_count}/{len(available_years)}")
    
    if failed_years:
        print(f"‚ùå √âchecs : {', '.join(failed_years)}")
    else:
        print("üéâ Tous les t√©l√©chargements ont r√©ussi !")

if __name__ == "__main__":
    main() 